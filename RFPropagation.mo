package RFPropagation
  import Modelica.Constants;
  import Modelica.SIunits;

  package Components
    model Antenna
      /*PARAMETERS*/
      parameter PowerdB Lantenna = 0 "Power losses of the antenna";
      parameter Directivity Dantenna = 0 "Directivity of the antenna";
      parameter Boolean TX = true "Transmission antenna" annotation(choices(checkBox = true), HideResult = true, Dialog(group="Antenna role"));
      parameter Boolean RX = false "Reception antenna" annotation(choices(checkBox = true), HideResult = true, Dialog(group="Antenna role"));
      /*VARIABLES*/
      RFPropagation.Interfaces.AntennaTerminal Terminal "Power transmitted to/received from the antenna terminal" annotation(
        Placement(visible = true, transformation(origin = {-46, -78}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-47, -75}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium "Power transmitted to/received from the propagation medium" annotation(
        Placement(visible = true, transformation(origin = {42, 64}, extent = {{-36, -36}, {36, 36}}, rotation = 0), iconTransformation(origin = {47, 67}, extent = {{-29, -29}, {29, 29}}, rotation = 0)));
    protected
      parameter Boolean[2] AntennaRoles = {TX, RX} "Available antenna roles";
    equation
      if Modelica.Math.BooleanVectors.countTrue(AntennaRoles) == 1 then
        if TX then
          Medium.P_dB = Terminal.P_dB + Dantenna - Lantenna;
          Medium.P_dBm = Terminal.P_dBm + Dantenna - Lantenna;
          Medium.P_W = Terminal.P_W * from_dB(Dantenna) / from_dB(Lantenna);
        elseif RX then
          Terminal.P_dB = Medium.P_dB + Dantenna - Lantenna;
          Terminal.P_dBm = Medium.P_dBm + Dantenna - Lantenna;
          Terminal.P_W = Medium.P_W * from_dB(Dantenna) / from_dB(Lantenna);
        end if;
      elseif Modelica.Math.BooleanVectors.countTrue(AntennaRoles) == 2 then
        Modelica.Utilities.Streams.error(getInstanceName() + ": More than one antenna role (TX/RX) is selected. Please, select only one.");
      else
        Modelica.Utilities.Streams.error(getInstanceName() + ": No antenna role (TX/RX) is selected. Please, select one.");
      end if;
      annotation(
        Icon(graphics = {Bitmap(origin = {-20, -20}, extent = {{-60, -80}, {60, 80}}, imageSource = "")}),
        Diagram(graphics = {Bitmap(origin = {-20, -20}, extent = {{-60, -80}, {60, 80}}, imageSource = "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")}));
    end Antenna;

    model Egli
    "The Egli model computes the total path median power loss over irregular terrain. It is typically applied to VHF and UHF communications"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter Modelica.SIunits.Distance hb "Height of the base antenna";
      parameter Modelica.SIunits.Distance hm "Height of the mobile antenna";
      parameter Modelica.SIunits.Distance d "Distance between the antennas";
      parameter Modelica.SIunits.Wavelenght lambda = c / f "Wavelength of the signal";
      parameter Modelica.SIunits.Frequency f = c / lambda "Frequency of the signal";
      parameter Modelica.SIunits.Velocity c = 299792458 "Speed of light";
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    initial equation
      assert(f >= 30e6 and f <= 3e9, getInstanceName() + ": Model possibly out of its range of validity! The frequency of the signal (f) should be within [30 MHz, 3 GHz]", level = AssertionLevel.warning);
    equation
      Lpath.P_dB = to_dB(Lpath.P_W);
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = ((((d ^ 2) / (hb * hm)) ^ 2) * (((f / 1e6) / 40) ^ 2)) * from_dB(Lmisc);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The Egli model’s ease of implementation and agreement with empirical data make it a popular choice, particularly for a first analysis. Unlike the foliage models discussed earlier, the Egli model provides the total path loss. The Egli model provides the median path loss due to irregular terrain loss without presence of vegetation. This model is tipically applied to VHF and UHF links<br><br>https://en.wikipedia.org/wiki/Egli_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "EGLI"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "EGLI")}));
    end Egli;

    model FreeSpacePathLoss
    "The free-space path loss model (FSPL) computes the power loss between two isotropic radiators in free space"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      extends RFPropagation.Components.PartialFreeSpacePathLoss;
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    equation
      Lpath.P_dB = FSPL.P_dB + Lmisc;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = FSPL.P_W * from_dB(Lmisc);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The free-space loss model provides a deterministic approach to calculating the power loss of a communication link as a function of the frequency/wavelength of the signal and the range of the link path. This formula assumes that the antennas are lossless, the polarization of the antennas is the same, there are no multipath effects and the radio wave path is sufficiently far away from obstructions that it acts as if it is in free space. It derives from the Friis transmission formula<br><br>https://en.wikipedia.org/wiki/Free-space_path_loss<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "FSPL"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "FSPL")}));
    end FreeSpacePathLoss;

    model Hata
    "The Hata model computes the median path power loss based on the graphical information from the Okumura model. This model also includes the PCS extension"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter Modelica.SIunits.Distance hb "Height of the base antenna";
      parameter Modelica.SIunits.Distance hm "Height of the mobile antenna";
      parameter Modelica.SIunits.Distance d "Distance between the antennas";
      parameter Modelica.SIunits.Wavelenght lambda = c / f "Wavelength of the signal";
      parameter Modelica.SIunits.Frequency f = c / lambda "Frequency of the signal";
      parameter Modelica.SIunits.Velocity c = 299792458 "Speed of light";
      parameter Boolean Open = false "Open area" annotation(choices(checkBox = true), HideResult = true, Dialog(group="Area type"));
      parameter Boolean Suburban = true "Suburban area" annotation(choices(checkBox = true), HideResult = true, Dialog(group="Area type"));
      parameter Boolean Urban = false "Urban area" annotation(choices(checkBox = true), HideResult = true, Dialog(group="Area type"));
      parameter Boolean SmallMedium = true "Small-medium city" annotation(choices(checkBox = true), HideResult = true, Dialog(group="City size"));
      parameter Boolean Large = false "Large city" annotation(choices(checkBox = true), HideResult = true, Dialog(group="City size"));
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      Real a "Antenna height correction factor";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    protected
      parameter Boolean[3] AreaTypes = {Urban, Suburban, Open} "Available city models";
      parameter Boolean[2] CitySizes = {SmallMedium, Large} "Available city sizes";
    initial equation
      assert(d >= 1e3 and d <= 20e3, getInstanceName() + ": Model out of its range of validity! The distance between the antennas (d) should be within [1 km, 20 km]", level = AssertionLevel.warning);
      assert(hb >= 30 and hb <= 200, getInstanceName() + ": Model out of its range of validity! The height of the base antenna (hb) should be within [30 m, 200 m]", level = AssertionLevel.warning);
      assert(hm >= 1 and hm <= 10, getInstanceName() + ": Model out of its range of validity! The height of the mobile antenna (hm) should be within [1 m, 10 m]", level = AssertionLevel.warning);
      assert(f >= 150e6 and f <= 2e9, getInstanceName() + ": Model out of its range of validity! The frequency of the signal (f) should be within [150 MHz, 2 GHz]", level = AssertionLevel.warning);
    equation
      if Modelica.Math.BooleanVectors.countTrue(CitySizes) <= 1 then
        if SmallMedium then
          a = (1.1 * Modelica.Math.log10(f) - 0.7) * hm - (1.56 * Modelica.Math.log10(f) - 0.8);
        elseif Large then
          if f <= 200e6 then
            a = 8.29 * (Modelica.Math.log10(1.54 * hm) ^ 2) - 1.1;
          else
            a = 3.2 * (Modelica.Math.log10(11.75 * hm) ^ 2) - 4.97;
          end if;
        else
          a = (1.1 * Modelica.Math.log10(f) - 0.7) * hm - (1.56 * Modelica.Math.log10(f) - 0.8);
          when terminal() then
            Modelica.Utilities.Streams.print(getInstanceName() + ": No city size (SmallMedium/Large) is selected. Using 'SmallMedium'.");
          end when;
        end if;
      else
        Modelica.Utilities.Streams.error(getInstanceName() + ": More than one city sizes (SmallMedium/Large) are selected. Please, select only one.");
      end if;
      if Modelica.Math.BooleanVectors.countTrue(AreaTypes) <= 1 then
        if Urban then
          if f <= 1.5e9 then
            Lpath.P_dB = 69.55 + 26.16 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) + Lmisc;
          else
            Lpath.P_dB = 46.3 + 33.9 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) + 3 + Lmisc;
          end if;
        elseif Suburban then
          if f <= 1.5e9 then
            Lpath.P_dB = 69.55 + 26.16 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) - 2 * ((Modelica.Math.log10(f / 28e6)) ^ 2) - 5.4 + Lmisc;
          else
            Lpath.P_dB = 46.3 + 33.9 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) + Lmisc;
          end if;
        elseif Open then
          if f <= 1.5e9 then
            Lpath.P_dB = 69.55 + 26.16 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) - 4.78 * (Modelica.Math.log10(f / 1e6) ^ 2) + 18.33 * Modelica.Math.log10(f / 1e6) - 40.94 + Lmisc;
          else
            Lpath.P_dB = 46.3 + 33.9 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) + Lmisc;
          end if;
        else
          if f <= 1.5e9 then
            Lpath.P_dB = 69.55 + 26.16 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) - 2 * ((Modelica.Math.log10(f / 28e6)) ^ 2) - 5.4 + Lmisc;
          else
            Lpath.P_dB = 46.3 + 33.9 * Modelica.Math.log10(f / 1e6) - 13.82 * Modelica.Math.log10(hb) - a + (44.9 - 6.55 * Modelica.Math.log10(hb)) * Modelica.Math.log10(d / 1e3) + Lmisc;
          end if;
          when terminal() then
            Modelica.Utilities.Streams.print(getInstanceName() + ": No area type (Urban/Suburban/Open) is selected. Using 'Suburban'.");
          end when;
        end if;
      else
        Modelica.Utilities.Streams.error(getInstanceName() + ": More than one area types (Urban/Suburban/Open) are selected. Please, select only one.");
      end if;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = from_dB(Lpath.P_dB);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The Hata model is an empirical formulation that incorporates the graphical information from the Okumura model. There are three different formulas for the Hata model: for urban areas, for suburban areas, and for open areas. It covers frequencies (f) from 150 MHz to 1.5 GHz (up to 2 GHz with PCS extension), base station antenna heights (hb) between 30 and 200 meters, mobile antenna heights (hm) between 1 and 10 meters and link distances (d) from 1 km up to 20 km<br><br>https://en.wikipedia.org/wiki/Hata_model<br>https://en.wikipedia.org/wiki/COST_Hata_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "HATA"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "HATA")}));
    end Hata;

    model ITUEarlyVegetation
    "The early ITU vegetation model provides results that are fairly consistent with Weissberger's foliage model in low frequencies"
    /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter Modelica.SIunits.Distance df "Depth of foliage along the LOS path";
      extends RFPropagation.Components.PartialFreeSpacePathLoss;
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Interfaces.AntennaMedium Medium_TX annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
      PowerdB Lf "Additional loss due to foliage";
    initial equation
      assert(df >= 0 and df <= 1e4, getInstanceName() + ": Model possibly out of its range of validity!", level = AssertionLevel.warning);
      assert(f >= 1e6 and f <= 1e10, getInstanceName() + ": Model possibly out of its range of validity!", level = AssertionLevel.warning);
    equation
      Lf = 0.2*((f/1e6)^0.3)*(df^0.6);
      Lpath.P_dB = FSPL.P_dB + Lf + Lmisc;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = from_dB(Lpath.P_dB);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The early ITU foliage model was adopted by the CCIR (the ITU’s predecessor) in 1986. While the model has been superseded by a more recent IT recommendation, it is an easily applied model that provides results that are fairly consistent with the Weissberger model<br><br>https://en.wikipedia.org/wiki/Early_ITU_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "ITU-EV"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "ITU-EV")}));
    end ITUEarlyVegetation;

    model ITUIndoor
    "The ITU indoor path loss model computes the median path power loss inside a room or a closed area inside a building delimited by walls of any form"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter PowerdB N = 20 "Distance power loss coefficient";
      parameter PowerdB Lf = 0 "Floor penetration loss factor";
      parameter Modelica.SIunits.Distance d "Distance between the antennas";
      parameter Modelica.SIunits.Wavelenght lambda = c / f "Wavelength of the signal";
      parameter Modelica.SIunits.Frequency f = c / lambda "Frequency of the signal";
      parameter Modelica.SIunits.Velocity c = 299792458 "Speed of light";
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    initial equation
      assert(f >= 900e6 and f <= 5.2e9, getInstanceName() + ": Model out of its range of validity! The frequency of the signal (f) should be within [900 MHz, 5.2 GHz]", level = AssertionLevel.warning);
    equation
      Lpath.P_dB = 20 * Modelica.Math.log10(f / 1e6) + N * Modelica.Math.log10(d) + Lf - 28 + Lmisc;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = from_dB(Lpath.P_dB);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The ITU model can be shown to be equivalent to the equation for free-space loss with the distance power being N = 20 (when not traversing floors). Thus the ITU model is essentially a modified power law model. Its coverage includes frequencies in the range of 900 MHz to 5.2 GHz and a penetrarion of up to three floors<br><br>https://en.wikipedia.org/wiki/ITU_model_for_indoor_attenuation<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "ITU-I"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "ITU-I")}));
    end ITUIndoor;

    model ITUTerrain
    "The ITU terrain model computes the path power loss due to terrain roughness. It is based on diffraction theory"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter Modelica.SIunits.Distance hLOS "Height of the Line-Of-Sight link";
      parameter Modelica.SIunits.Distance h0 "Height of the obstruction";
      parameter Modelica.SIunits.Distance d1 "Distance between the obstruction and the antenna 1";
      parameter Modelica.SIunits.Distance d2 "Distance between the obstruction and the antenna 2";
      extends RFPropagation.Components.PartialFreeSpacePathLoss(d = d1+d2);
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      Modelica.SIunits.Radius RadiusF1 "Radius of the first Fresnel zone";
      Modelica.SIunits.Distance h "Difference of height between the Line-Of-Sight link and the obstruction";
      Real Cn "Normalized terrain clearance";
      PowerdB Ldiff "Additional loss due to diffraction";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    equation
      RadiusF1 = 17.3 * sqrt(d1 * d2 * 1e6 / (f * d));
      h = hLOS - h0;
      Cn = h / RadiusF1;
      Ldiff = 10 - 20 * Cn;
      Lpath.P_dB = FSPL.P_dB + Ldiff + Lmisc;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = from_dB(Lpath.P_dB);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      assert(Ldiff >= 6, getInstanceName()+": Model possibly out of its range of validity! The additional loss due to diffraction (Ldiff) should not be less than 6 dB", level = AssertionLevel.warning);
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The ITU terrain model is based on diffraction theory and determine a median path loss aditional to the free-space loss. It accounts for obstructions in the middle of the telecommunication link and, therefore, is suitable to be used inside cities as well as in open fields. This model is generally considered valid for losses above 15 dB, but it is acceptable to extrapolate it to as little as 6 dB of loss<br><br>https://en.wikipedia.org/wiki/ITU_terrain_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "ITU-T"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "ITU-T")}));
    end ITUTerrain;

    model LogDistance
    "The log-distance path loss model computes the power loss inside a building or densely populated areas"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter PowerdB N = 20 "Distance power loss coefficient";
      parameter PowerdB Xs = 20 "Fade depth";
      parameter Modelica.SIunits.Distance d "Distance between the antennas";
      parameter Modelica.SIunits.Distance d0 = 1 "Reference distance";
      parameter Modelica.SIunits.Wavelenght lambda = c / f "Wavelength of the signal";
      parameter Modelica.SIunits.Frequency f = c / lambda "Frequency of the signal";
      parameter Modelica.SIunits.Velocity c = 299792458 "Speed of light";
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Components.FreeSpacePathLoss L_FSPL(Lmisc = Lmisc, d = d0, lambda = lambda, f = f) "Free-space path loss at reference distance";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    equation
      Lpath.P_dB = L_FSPL.Lpath.P_dB + N * Modelica.Math.log10(d / d0) + Xs + Lmisc;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = from_dB(Lpath.P_dB);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      Medium_TX.P_dB = L_FSPL.Medium_TX.P_dB;
      Medium_TX.P_dBm = L_FSPL.Medium_TX.P_dBm;
      Medium_TX.P_W = L_FSPL.Medium_TX.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The log-distance path loss model is a modified power law with a log-normal variability, similar to log-normal shadowing<br><br>https://en.wikipedia.org/wiki/Log-distance_path_loss_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "LOG"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "LOG")}));
    end LogDistance;

    partial model PartialFreeSpacePathLoss "Free-space path loss propagation partial model"
      /*PARAMETERS*/
      parameter Modelica.SIunits.Distance d "Distance between the antennas";
      parameter Modelica.SIunits.Wavelenght lambda = c / f "Wavelength of the signal";
      parameter Modelica.SIunits.Frequency f = c / lambda "Frequency of the signal";
      parameter Modelica.SIunits.Velocity c = 299792458 "Speed of light";
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow FSPL "Free-space path loss";
    equation
      FSPL.P_dB = to_dB(FSPL.P_W);
      FSPL.P_W = (4 * Modelica.Constants.pi * d / lambda) ^ 2;
      FSPL.P_dBm = to_dBm(FSPL.P_W);
    end PartialFreeSpacePathLoss;

    model RFCable
      /*PARAMETERS*/
      parameter PowerdB Lcable = 0 "Power losses of the RF cable";
      parameter Boolean TX = true "Transmission RF cable" annotation(choices(checkBox = true), HideResult = true, Dialog(group="RF cable role"));
      parameter Boolean RX = false "Reception RF cable" annotation(choices(checkBox = true), HideResult = true, Dialog(group="RF cable role"));
      /*VARIABLES*/
      RFPropagation.Interfaces.RadioTerminal Radio annotation(
        Placement(visible = true, transformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaTerminal Antenna annotation(
        Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    protected
      parameter Boolean[2] RFCableRoles = {TX, RX} "Available RF cable roles";
    equation
      if Modelica.Math.BooleanVectors.countTrue(RFCableRoles) == 1 then
        if TX then
          Antenna.P_dB = Radio.P_dB - Lcable;
          Antenna.P_dBm = Radio.P_dBm - Lcable;
          Antenna.P_W = Radio.P_W / from_dB(Lcable);
        elseif RX then
          Radio.P_dB = Antenna.P_dB - Lcable;
          Radio.P_dBm = Antenna.P_dBm - Lcable;
          Radio.P_W = Antenna.P_W / from_dB(Lcable);
        end if;
      elseif Modelica.Math.BooleanVectors.countTrue(RFCableRoles) == 2 then
        Modelica.Utilities.Streams.error(getInstanceName() + ": More than one antenna role (TX/RX) is selected. Please, select only one.");
      else
        Modelica.Utilities.Streams.error(getInstanceName() + ": No antenna role (TX/RX) is selected. Please, select one.");
      end if;
      annotation(
        Icon(graphics = {Line(points = {{-100, 0}, {100, 0}}, thickness = 2)}),
        Diagram(graphics = {Line(points = {{-100, 0}, {100, 0}}, thickness = 2)}));
    end RFCable;

    model Okumura
    "The Okumura model computes the median path power loss. It is based on measurements made in Tokyo in 1960"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter PowerdB Amu "Median attenuation";
      parameter PowerdB HFb "Base antenna height gain factor";
      parameter PowerdB HFm "Mobile antenna height gain factor";
      extends RFPropagation.Components.PartialFreeSpacePathLoss;
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    initial equation
      assert(d >= 1e3 and d <= 100e3, getInstanceName() + ": Model out of its range of validity! The distance between the antennas (d) should be within [1 km, 100 km]", level = AssertionLevel.warning);
      assert(f >= 200e6 and f <= 1.92e9, getInstanceName() + ": Model out of its range of validity! The frequency of the signal (f) should be within [200 MHz, 1.92 GHz]", level = AssertionLevel.warning);
    equation
      Lpath.P_dB = FSPL.P_dB + Amu - HFb - HFm + Lmisc;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = from_dB(Lpath.P_dB);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The Okumura model is based on measurements made in Tokyo in 1960, between 200 MHz and 1.92 GHz. The model is empirical, being based solely on the measured data. The actual path loss predictions are made based on graphs of Okumura’s results, with various correction factors applied for some parameters<br><br>For the Okumura model, the prediction area is divided into terrain categories: open area, suburban area, and urban area. The open-area model represents locations with open space, no tall trees or buildings in the path, and the land cleared for 300–400 m ahead (i.e., farmland). The suburban area model represents a village or a highway scattered with trees and houses, some obstacles near the mobile, but not very congested. The urban area model represents a built-up city or large town with large buildings and houses with two or more stories, or larger villages with close houses and tall thickly grown trees. The Okumura model uses the urban area as a baseline and then applies correction factors for conversion to other classifications. A series of terrain types is also defined. Quasi-smooth terrain is the reference terrain and correction factors are applied for other types of terrain<br><br>https://en.wikipedia.org/wiki/Okumura_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "OKUMURA"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "OKUMURA")}));
    end Okumura;

    model WeissbergerFoliage
    "Weissberger's modified exponential decay model computes the path power loss when the propagation path is blocked by dense, dry, leafed trees"
    /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter Modelica.SIunits.Distance df "Depth of the foliage along the LOS path";
      extends RFPropagation.Components.PartialFreeSpacePathLoss;
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Interfaces.AntennaMedium Medium_TX annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
      PowerdB Lf "Additional loss due to foliage";
    initial equation
      assert(df >= 0 and df <= 400, getInstanceName() + ": Model out of its range of validity! The depth of the foliage along the LOS path (df) should be within [0 m, 400 m]", level = AssertionLevel.warning);
      assert(f >= 230e6 and f <= 95e9, getInstanceName() + ": Model out of its range of validity! The frequency of the signal (f) should be within [230 MHz, 95 GHz]", level = AssertionLevel.warning);
    equation
      if df >= 0 and df <= 14 then
        Lf = 0.45*((f/1e9)^0.284)*df;
      elseif df > 14 and df <= 400 then
        Lf = 1.33*((f/1e9)^0.284)*(df^0.588);
      end if;
      Lpath.P_dB = FSPL.P_dB + Lf + Lmisc;
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = from_dB(Lpath.P_dB);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The attenuation predicted by Weissberger’s model is in addition to free-space (and any other nonfoliage) loss. Weissberger’s modified exponential decay model applies when the propagation path is blocked by dense, dry, leafed trees. This model covers the frequency range from 230 MHz to 95 GHz and a depth of foliage along the LOS path of up to 400 m<br><br>https://en.wikipedia.org/wiki/Weissberger%27s_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "WSSBRGR-F"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "WSSBRGR-F")}));
    end WeissbergerFoliage;

    model Young
    "The Young model computes the median path power loss. It is based on measurements made in New York City in 1952"
      /*PARAMETERS*/
      parameter PowerdB Lmisc = 0 "Miscellaneous power losses";
      parameter PowerdB CF = 25 "Clutter factor";
      parameter Modelica.SIunits.Distance hb "Height of the base antenna";
      parameter Modelica.SIunits.Distance hm "Height of the mobile antenna";
      parameter Modelica.SIunits.Distance d "Distance between the antennas";
      parameter Modelica.SIunits.Wavelenght lambda = c / f "Wavelength of the signal";
      parameter Modelica.SIunits.Frequency f = c / lambda "Frequency of the signal";
      parameter Modelica.SIunits.Velocity c = 299792458 "Speed of light";
      /*VARIABLES*/
      RFPropagation.Interfaces.PowerFlow Lpath "Path loss";
      RFPropagation.Interfaces.AntennaMedium Medium_TX "Interface with the transmitting antenna" annotation(
        Placement(visible = true, transformation(origin = {-70, -70}, extent = {{-30, -30}, {30, 30}}, rotation = 0), iconTransformation(origin = {-62, -62}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
      RFPropagation.Interfaces.AntennaMedium Medium_RX "Interface with the receiving antenna" annotation(
        Placement(visible = true, transformation(origin = {70, 70}, extent = {{-30, -30}, {30, 30}}, rotation = 180), iconTransformation(origin = {62, 62}, extent = {{-30, -30}, {30, 30}}, rotation = 180)));
    initial equation
      assert(f >= 150e6 and f <= 3.7e9, getInstanceName() + ": Model out of its range of validity! The frequency of the signal (f) should be within [150 MHz, 3.7 GHz]", level = AssertionLevel.warning);
    equation
      Lpath.P_dB = to_dB(Lpath.P_W);
      Lpath.P_dBm = to_dBm(Lpath.P_W);
      Lpath.P_W = (((d ^ 2) / (hb * hm)) ^ 2) * from_dB(CF + Lmisc);
      Medium_RX.P_dB = Medium_TX.P_dB - Lpath.P_dB;
      Medium_RX.P_dBm = Medium_TX.P_dBm - Lpath.P_dB;
      Medium_RX.P_W = Medium_TX.P_W / Lpath.P_W;
      annotation(Documentation(info = "<html><p>Model created by Alejandro Rísquez Ruiz<br><br>The Young data were taken in New York City in 1952 and covers frequencies of 150–3700 MHz. Its structure is similar to the Egli model<br><br>https://en.wikipedia.org/wiki/Young_model<br><br>\"Introduction to RF propagation\", by John S. Seybold</p></html>"), version = "1.0", versionDate  = "2020-09-06",
        Icon(graphics = {Text(extent = {{-80, 40}, {80, -40}}, textString = "YOUNG"), Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX")}),
        Diagram(graphics = {Text(origin = {-90, -90}, extent = {{-10, 10}, {10, -10}}, textString = "TX"), Text(origin = {90, 90}, extent = {{-10, 10}, {10, -10}}, textString = "RX"), Text(extent = {{-80, 40}, {80, -40}}, textString = "YOUNG")}));
    end Young;
  end Components;

  package Examples

    model EgliTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Egli EGLI1(hb = 20, hm = 3, d = 1e3, f = 100e6) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Egli EGLI2(hb = 20, hm = 3, d = 1e3, f = 100e6) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -29.6736, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, EGLI1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(EGLI1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, EGLI2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(EGLI2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end EgliTest;
    model FreeSpacePathLossTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.FreeSpacePathLoss FSPL1(d = 100e3, f = 100e6) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.FreeSpacePathLoss FSPL2(d = 100e3, f = 100e6) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -50.4478, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, FSPL1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(FSPL1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, FSPL2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(FSPL2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end FreeSpacePathLossTest;

    model HataTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Hata HATA1(  Large = true, Open = false, SmallMedium = false, Suburban = false, Urban = true, d = 3.7e3, f = 870e6,hb = 68, hm = 3) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Hata HATA2(hb = 68, hm = 3, d = 3.7e3, f = 870e6, Open = false, Suburban = false, Urban = true, SmallMedium = false,  Large = true) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -29.6736, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, HATA1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(HATA1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, HATA2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(HATA2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end HataTest;

    model ITUEarlyVegetationTest
      RFPropagation.Sources.PowerSet P_TX1(P = 23, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.ITUEarlyVegetation ITUEV1(d = 1e3, df = 12, f = 1e9) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.ITUEarlyVegetation ITUEV2(d = 1e3, df = 12, f = 1e9) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -84.6073, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, ITUEV1.Medium_TX) annotation(
        Line(points = {{-30, 54}, {-30, 31}, {-12, 31}, {-12, 28}}, pattern = LinePattern.None));
      connect(ITUEV1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12, 52}, {28, 52}, {28, 54}, {30, 54}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, ITUEV2.Medium_TX) annotation(
        Line(points = {{-30, -26}, {-24, -26}, {-24, -52}, {-12, -52}}, pattern = LinePattern.None));
      connect(ITUEV2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12, -28}, {19, -28}, {19, -26}, {30, -26}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end ITUEarlyVegetationTest;

    model ITUIndoorTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.ITUIndoor ITUI1(N = 31, Lf = 16, d = 100, f = 5.2e9) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.ITUIndoor ITUI2(N = 31, Lf = 16, d = 100, f = 5.2e9) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -29.6736, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, ITUI1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(ITUI1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, ITUI2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(ITUI2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end ITUIndoorTest;

    model ITUTerrainTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.ITUTerrain ITUTM1(hLOS = 2.75, h0 = 2, d1 = 1.5e3, d2 = 1.5e3, f = 100e6) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.ITUTerrain ITUTM2(hLOS = 2.75, h0 = 2, d1 = 1.5e3, d2 = 1.5e3, f = 100e6) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -29.6736, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, ITUTM1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(ITUTM1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, ITUTM2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(ITUTM2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end ITUTerrainTest;

    model LogDistanceTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.LogDistance LOG1(N = 30, Xs = 11.5, d = 100, f = 1.5e9) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.LogDistance LOG2(N = 30, Xs = 11.5, d = 100, f = 1.5e9) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -29.6736, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, LOG1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(LOG1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, LOG2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(LOG2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end LogDistanceTest;

    model OkumuraTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Okumura OKUMURA1(Amu = 26, HFb = -8, HFm = 0, d = 3.7e3, f = 870e6) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Okumura OKUMURA2(Amu = 26, HFb = -8, HFm = 0, d = 3.7e3, f = 870e6) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -29.6736, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, OKUMURA1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(OKUMURA1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, OKUMURA2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(OKUMURA2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end OkumuraTest;
    
    model WeissbergerFoliageTest
      RFPropagation.Sources.PowerSet P_TX1(P = 23, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.WeissbergerFoliage WSSBRGRF1(d = 1e3, df = 12, f = 1e9) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.WeissbergerFoliage WSSBRGRF2(d = 1e3, df = 12, f = 1e9) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -84.6073, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, WSSBRGRF1.Medium_TX) annotation(
        Line(points = {{-30, 54}, {-30, 31}, {-12, 31}, {-12, 28}}, pattern = LinePattern.None));
      connect(WSSBRGRF1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12, 52}, {28, 52}, {28, 54}, {30, 54}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, WSSBRGRF2.Medium_TX) annotation(
        Line(points = {{-30, -26}, {-24, -26}, {-24, -52}, {-12, -52}}, pattern = LinePattern.None));
      connect(WSSBRGRF2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12, -28}, {19, -28}, {19, -26}, {30, -26}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end WeissbergerFoliageTest;

    model YoungTest
      RFPropagation.Sources.PowerSet P_TX1(P = 100, W = true, dBm = false) annotation(
        Placement(visible = true, transformation(origin = {-80, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX1(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX1(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Young YOUNG1(hb = 20, hm = 3, d = 1e3, f = 150e6) annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX1(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX1(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_TX2(Lcable = 3, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-70, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_TX2(Dantenna = 10, Lantenna = 1, TX = true) annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Young YOUNG2(hb = 20, hm = 3, d = 1e3, f = 150e6) annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      RFPropagation.Components.Antenna Antenna_RX2(Dantenna = 10, Lantenna = 1, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{20, -20}, {-20, 20}}, rotation = 0)));
      RFPropagation.Components.RFCable RFCable_RX2(Lcable = 3, RX = true, TX = false) annotation(
        Placement(visible = true, transformation(origin = {70, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      RFPropagation.Sources.PowerSet P_RX2(P = -29.6736, W = false, dBm = true) annotation(
        Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(RFCable_TX1.Radio, P_TX1.Terminal) annotation(
        Line(points = {{-80, 20}, {-80, 20}}, color = {170, 0, 0}));
      connect(RFCable_TX1.Antenna, Antenna_TX1.Terminal) annotation(
        Line(points = {{-60, 20}, {-49, 20}, {-49, 25}}, color = {0, 0, 255}));
      connect(Antenna_TX1.Medium, YOUNG1.Medium_TX) annotation(
        Line(points = {{-30.6, 53.4}, {-11.6, 53.4}, {-11.6, 28.4}}, pattern = LinePattern.None));
      connect(YOUNG1.Medium_RX, Antenna_RX1.Medium) annotation(
        Line(points = {{12.4, 52.4}, {32.8, 52.4}, {32.8, 53.4}, {31.4, 53.4}}, pattern = LinePattern.None));
      connect(RFCable_RX1.Antenna, Antenna_RX1.Terminal) annotation(
        Line(points = {{60, 20}, {49, 20}, {49, 25}}, color = {0, 0, 255}));
      connect(RFCable_TX2.Antenna, Antenna_TX2.Terminal) annotation(
        Line(points = {{-60, -60}, {-49, -60}, {-49, -55}}, color = {0, 0, 255}));
      connect(Antenna_TX2.Medium, YOUNG2.Medium_TX) annotation(
        Line(points = {{-30.6, -26.6}, {-11.6, -26.6}, {-11.6, -51.6}}, pattern = LinePattern.None));
      connect(YOUNG2.Medium_RX, Antenna_RX2.Medium) annotation(
        Line(points = {{12.4, -27.6}, {32.8, -27.6}, {32.8, -26.6}, {31.4, -26.6}}, pattern = LinePattern.None));
      connect(RFCable_RX2.Antenna, Antenna_RX2.Terminal) annotation(
        Line(points = {{60, -60}, {49, -60}, {49, -55}}, color = {0, 0, 255}));
      connect(P_RX2.Terminal, RFCable_RX2.Radio) annotation(
        Line(points = {{80, -60}, {80, -60}}, color = {170, 0, 0}));
    end YoungTest;
  end Examples;

  package Interfaces
    connector AntennaMedium "Power transmitted to/received from the propagation medium by an antenna"
      extends PowerFlow;
      annotation(
        defaultComponentName = "Antenna-medium",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Bitmap(extent = {{-100, -100}, {100, 100}}, imageSource = "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")}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Text(origin = {28, 2}, lineColor = {0, 0, 255}, extent = {{-160, 110}, {40, 50}}, textString = "%name"), Bitmap(extent = {{-60, -60}, {60, 60}}, imageSource = "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")}));
    end AntennaMedium;

    connector AntennaTerminal "Power transmitted to/received from an antenna terminal"
      extends PowerFlow;
      annotation(
        defaultComponentName = "Antenna terminal",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(lineColor = {0, 0, 255}, fillColor = {0, 0, 255}, fillPattern = FillPattern.Solid, extent = {{-100, 100}, {100, -100}})}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(lineColor = {0, 0, 255}, fillColor = {0, 0, 255}, fillPattern = FillPattern.Solid, extent = {{-40, 40}, {40, -40}}), Text(origin = {28, 2}, lineColor = {0, 0, 255}, extent = {{-160, 110}, {40, 50}}, textString = "%name")}));
    end AntennaTerminal;

    connector PowerFlow "Connector of the power flow"
      PowerdB P_dB "Power in dB";
      PowerdBm P_dBm "Power in dBm";
      Modelica.SIunits.Power P_W "Power in W";
    end PowerFlow;

    connector RadioTerminal "Power transmitted to/received from a radio terminal"
      extends PowerFlow;
      annotation(
        defaultComponentName = "Radio terminal",
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(lineColor = {170, 0, 0}, fillColor = {170, 0, 0}, fillPattern = FillPattern.Solid, extent = {{-100, 100}, {100, -100}})}),
        Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Text(origin = {28, 2}, lineColor = {0, 0, 255}, extent = {{-160, 110}, {40, 50}}, textString = "%name"), Rectangle(lineColor = {170, 0, 0}, fillColor = {170, 0, 0}, fillPattern = FillPattern.Solid, extent = {{-40, 40}, {40, -40}})}));
    end RadioTerminal;
  end Interfaces;

  package Sources
    model PowerSet "Set power"
      parameter Real P "Power" annotation(
        HideResult = true);
      parameter Boolean dB = false "Power in dB" annotation(
        choices(checkBox = true),
        HideResult = true);
      parameter Boolean dBm = true "Power in dBm" annotation(
        choices(checkBox = true),
        HideResult = true);
      parameter Boolean W = false "Power in W" annotation(
        choices(checkBox = true),
        HideResult = true);
      RFPropagation.Interfaces.RadioTerminal Terminal annotation(
        Placement(visible = true, transformation(origin = {0, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    protected
      parameter Boolean[3] Units = {dB, dBm, W} "Available units";
    equation
      if Modelica.Math.BooleanVectors.countTrue(Units) <= 1 then
        if dB then
          Terminal.P_dB = P;
          Terminal.P_dBm = to_dBm(Terminal.P_W);
          Terminal.P_W = from_dB(P);
        elseif dBm then
          Terminal.P_dB = to_dB(Terminal.P_W);
          Terminal.P_dBm = P;
          Terminal.P_W = from_dBm(P);
        elseif W then
          Terminal.P_dB = to_dB(P);
          Terminal.P_dBm = to_dBm(P);
          Terminal.P_W = P;
        else
          Terminal.P_dB = to_dB(Terminal.P_W);
          Terminal.P_dBm = P;
          Terminal.P_W = from_dBm(P);
          when terminal() then
            Modelica.Utilities.Streams.print(getInstanceName() + ": No unit (dB/dBm/W) is selected. Using 'dBm'.");
          end when;
        end if;
      else
        Modelica.Utilities.Streams.error(getInstanceName() + ": More than one unit (dB/dBm/W) are selected. Please, select only one.");
      end if;
      annotation(
        Icon(graphics = {Bitmap(extent = {{-100, -100}, {100, 100}}, imageSource = "")}),
        Diagram(graphics = {Bitmap(extent = {{-100, -100}, {100, 100}}, imageSource = "")}));
    end PowerSet;
  end Sources;

  function to_dB "Convert from W to dB"
    extends Modelica.SIunits.Icons.Conversion;
    input Modelica.SIunits.Power watt "W value";
    output RFPropagation.PowerdB decibel "dB value";
  algorithm
    decibel := 10 * Modelica.Math.log10(watt);
  end to_dB;

  function from_dB "Convert from dB to W"
    extends Modelica.SIunits.Icons.Conversion;
    input RFPropagation.PowerdB decibel "dB value";
    output Modelica.SIunits.Power watt "W value";
  algorithm
    watt := 10 ^ (decibel / 10);
  end from_dB;

  function to_dBm "Convert from W to dBm"
    extends Modelica.SIunits.Icons.Conversion;
    input Modelica.SIunits.Power watt "W value";
    output RFPropagation.PowerdBm decibel "dBm value";
  algorithm
    decibel := 10 * Modelica.Math.log10(watt / 1e-3);
  end to_dBm;

  function from_dBm "Convert from dBm to W"
    extends Modelica.SIunits.Icons.Conversion;
    input RFPropagation.PowerdBm decibel "dBm value";
    output Modelica.SIunits.Power watt "W value";
  algorithm
    watt := 1e-3 * 10 ^ (decibel / 10);
  end from_dBm;

  type Directivity = Real(final quantity = "Directivity", final unit = "dBi") "Maximum gain of an antenna in dBi";
  type PowerdBm = Real(final quantity = "Power", final unit = "dBm") "Power in dBm";
  type PowerdB = Real(final quantity = "Power", final unit = "dB") "Power in dB";
  annotation(
    uses(Modelica(version = "3.2.3")));
end RFPropagation;